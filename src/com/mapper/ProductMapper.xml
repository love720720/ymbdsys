<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.ProductMapper">
    <select id="recommendProductCount" resultType="int" parameterType="int">
		SELECT
			COUNT(p.id)
		FROM
			product p
		LEFT JOIN
			classify c
		ON
			p.classify_id = c.id
		WHERE
			p.recommend = #{recommend}
	</select>
    <update id="recommendProduct" parameterType="Product">
        UPDATE
	 		product
	 	SET
			recommend = #{recommend}
		WHERE
			id = #{id}
    </update>
    <select id="recommendProductList" resultType="Product" parameterType="int">
		SELECT
			p.id id,
			c.name classifyName,
			p.no no,
			p.name name,
			from_unixtime(p.create_time /1000) createTimeInfo,
			from_unixtime(p.shelves_time /1000) shelvesTimeInfo,
			p.stat stat,
			p.price_old priceOld,
			p.price_now priceNow,
			p.inventory inventory
		FROM
			product p
		LEFT JOIN
			classify c
		ON
			p.classify_id = c.id
		WHERE
			p.recommend = #{recommend}
		ORDER BY
			p.id DESC
	</select>
	<select id="getProductAsName" resultType="Product" parameterType="String">
		SELECT
			p.id id,
			c.name classifyName,
			p.no no,
			p.name name,
			from_unixtime(p.create_time /1000) createTimeInfo,
			from_unixtime(p.shelves_time /1000) shelvesTimeInfo,
			p.stat stat,
			p.price_old priceOld,
			p.price_now priceNow,
			p.inventory inventory
		FROM
			product p
		LEFT JOIN
			classify c
		ON
			p.classify_id = c.id
		WHERE
			p.name LIKE '%${value}%'
		ORDER BY
			p.shelves_time DESC
		LIMIT 10
	</select>
	<select id="getSelectProduct" resultType="Product" parameterType="java.util.Map">
		SELECT
			p.id id,
			p.no no,
			p.name name,
			p.price_now priceNow
		FROM
			product p
		WHERE
			name LIKE '%${name}%'
		AND
			p.id NOT IN (${productIds})
		AND
			stat = ${stat}
		ORDER BY
			p.shelves_time DESC
		LIMIT 10
	</select>
	<select id="getLastProduct" resultType="Product">
		SELECT
			p.no no
		FROM
			product p
		ORDER BY
			p.id DESC
		LIMIT 1;
	</select>
	<select id="productTodayShelvesList" resultType="Product" parameterType="java.util.Map">
		SELECT
			p.id id,
			p.no no,
			p.name name,
			p.price_now priceNow
		FROM
			product p
		WHERE
			p.stat = #{stat}
		AND
			p.shelves_time = #{shelvesTime}
		ORDER BY
			p.shelves_time DESC
	</select>
	<select id="productTodayList" resultType="Product" parameterType="long">
	    SELECT
			p.id id,
			c.name classifyName,
			p.no no,
			p.name name,
			from_unixtime(p.create_time /1000) createTimeInfo,
			from_unixtime(p.shelves_time /1000) shelvesTimeInfo,
			p.stat stat,
			p.price_old priceOld,
			p.price_now priceNow,
			p.inventory inventory,
			p.recommend recommend
		FROM
			product p
		LEFT JOIN
			classify c
		ON
			p.classify_id = c.id
		WHERE
			p.create_time > #{createTime}
		ORDER BY
			p.id DESC
	</select>
	<select id="productList" resultType="Product" parameterType="com.pojo.PageBean">
		SELECT
			p.id id,
			c.name classifyName,
			p.no no,
			p.name name,
			from_unixtime(p.create_time /1000) createTimeInfo,
			from_unixtime(p.shelves_time /1000) shelvesTimeInfo,
			p.stat stat,
			p.price_old priceOld,
			p.price_now priceNow,
			p.inventory inventory,
			p.recommend recommend
		FROM
			product p
		LEFT JOIN
			classify c
		ON
			p.classify_id = c.id 
		ORDER BY
			p.shelves_time DESC
		LIMIT
			#{index},#{count}
	</select>
	<insert id="insertProduct" parameterType="Product" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO
			product
		(
			no,
			classify_id,
			name,
			create_time,
			update_time,
			shelves_time,
			stat,
			price_old,
			price_now,
			inventory,
			image_name,
			image_file_name,
			image_flag,
			recommend
		)
		VALUES
		(
			#{no},
			#{classifyId},
			#{name},
			#{createTime},
			#{updateTime},
			#{shelvesTime},
			#{stat},
			#{priceOld},
			#{priceNow},
			#{inventory},
			#{imageName},
			#{imageFileName},
			#{imageFlag},
			#{recommend}
		)
	</insert>
	<update id="updateProduct" parameterType="Product">
	 	UPDATE
	 		product
	 	SET
			classify_id = #{classifyId},
			name = #{name},
			stat = #{stat},
			image_flag = #{imageFlag},
			price_old = #{priceOld},
			price_now = #{priceNow},
			image_name = #{imageName},
			update_time = #{updateTime},
			image_file_name = #{imageFileName},
			inventory = #{inventory},
			shelves_time = #{shelvesTime},
			record = #{record},
			recommend = #{recommend}
		WHERE
			id = #{id}
	</update>
	<delete id="deleteProduct" parameterType="int">
		DELETE FROM product WHERE id = #{id}
	</delete>
	<delete id="deleteProductAsClassify" parameterType="int">
		DELETE FROM product WHERE classify_id = #{id}
	</delete>
	<select id="getCount" resultType="int">
		SELECT
			COUNT(id)
		FROM
			product
		ORDER BY
			id
	</select>
	<select id="getProduct" resultType="Product" parameterType="int">
		SELECT
			p.id id,
			c.name classifyName,
			c.id classifyId,
			p.no no,
			p.name name,
			p.image_flag imageFlag,
			from_unixtime(p.create_time /1000) createTimeInfo,
			from_unixtime(p.shelves_time /1000) shelvesTimeInfo,
			from_unixtime(p.update_time /1000) updateTimeInfo,
			p.create_time createTime,
			p.update_time updateTime,
			p.stat stat,
			p.price_old priceOld,
			p.price_now priceNow,
			p.image_name imageName,
			p.image_file_name imageFileName,
			p.inventory inventory,
			p.record record,
			p.recommend recommend
		FROM
			product p
		LEFT JOIN
			classify c
		ON
			p.classify_id = c.id
		WHERE
			p.id = #{id}
	</select>
	<select id="getProductAsOrder" parameterType="int" resultType="Product">
		SELECT
			op.by_num byNum,
			op.price_nows priceNows,
			p.id id,
			p.name name,
			p.no no,
			op.price_old priceOld,
			op.price_now priceNow
		FROM
			order_product op
		LEFT OUTER JOIN
			product p
		ON
			op.product_id = p.id
		WHERE
			op.order_id = #{id}
	</select>
</mapper>